name: Docker CI/CD Pipeline with Semantic Versioning

on:
  push:
    branches:
      - develop
      - homolog
      - main

  pull_request:
    branches:
      - main

env:
  IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/conversao-distancia

jobs:
  build-and-publish-develop:
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    steps:
      - name: Check out the code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Develop Image
        run: |
          docker build -t $IMAGE_NAME:develop .
          docker push $IMAGE_NAME:develop

  build-and-publish-homolog:
    if: github.ref == 'refs/heads/homolog'
    runs-on: ubuntu-latest
    steps:
      - name: Check out the code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Homolog Image
        run: |
          docker build -t $IMAGE_NAME:homolog .
          docker push $IMAGE_NAME:homolog

  build-and-publish-production:
    if: github.event_name == 'pull_request' && github.event.pull_request.merged && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [build-and-test, determine-version]
    steps:
      - name: Check out the code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Production Image with Version
        id: tag-image
        run: |
          docker build -t $IMAGE_NAME:latest .
          docker tag $IMAGE_NAME:latest $IMAGE_NAME:${{ needs.determine-version.outputs.new_version }}

      - name: Push Production Image
        run: |
          docker push $IMAGE_NAME:latest
          docker push $IMAGE_NAME:${{ needs.determine-version.outputs.new_version }}

  determine-version:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    outputs:
      new_version: ${{ steps.set-version.outputs.NEW_VERSION }}
    steps:
      - name: Check out the code
        uses: actions/checkout@v2

      - name: Fetch all tags
        run: git fetch --tags

      - name: Determine new version
        id: set-version
        run: |
          latest_tag=$(git describe --tags `git rev-list --tags --max-count=1` || echo "v0.0.0")
          echo "Latest tag: $latest_tag"
          major=$(echo $latest_tag | cut -d. -f1 | sed 's/v//')
          minor=$(echo $latest_tag | cut -d. -f2)
          patch=$(echo $latest_tag | cut -d. -f3)
          if git log -1 --pretty=%B | grep -q '#major'; then
            major=$((major + 1))
            minor=0
            patch=0
          elif git log -1 --pretty=%B | grep -q '#minor'; then
            minor=$((minor + 1))
            patch=0
          else
            patch=$((patch + 1))
          fi
          new_version="v${major}.${minor}.${patch}"
          echo "NEW_VERSION=$new_version" >> $GITHUB_ENV
          echo "::set-output name=NEW_VERSION::$new_version"
