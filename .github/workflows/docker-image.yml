name: Docker CI/CD Pipeline with Semantic Versioning

on:
  pull_request:
    branches:
      - main
      - homolog

  push:
    branches:
      - main

env:
  IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/conversao-distancia

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: |
          docker build -t $IMAGE_NAME:latest .

      - name: Run Application Tests
        run: |
          docker run --rm -d -p 5000:5000 --name test-container $IMAGE_NAME:latest
          sleep 5  # Espera o contÃªiner iniciar
          curl -f http://localhost:5000/convert?from=meters&to=kilometers&value=1000
          docker stop test-container

  determine-version:
    runs-on: ubuntu-latest
    needs: build-and-test
    outputs:
      new_version: ${{ steps.set-version.outputs.NEW_VERSION }}
    steps:
      - name: Check out the code
        uses: actions/checkout@v2

      - name: Fetch all tags
        run: git fetch --tags

      - name: Determine new version
        id: set-version
        run: |
          # Get the latest tag, or set a default if none are found
          latest_tag=$(git describe --tags `git rev-list --tags --max-count=1` || echo "v0.0.0")
          echo "Latest tag: $latest_tag"

          # Extract the version numbers
          major=$(echo $latest_tag | cut -d. -f1 | sed 's/v//')
          minor=$(echo $latest_tag | cut -d. -f2)
          patch=$(echo $latest_tag | cut -d. -f3)

          # Determine if this is a major, minor, or patch update
          if git log -1 --pretty=%B | grep -q '#major'; then
            major=$((major + 1))
            minor=0
            patch=0
          elif git log -1 --pretty=%B | grep -q '#minor'; then
            minor=$((minor + 1))
            patch=0
          else
            patch=$((patch + 1))
          fi

          # Create the new version string
          new_version="v${major}.${minor}.${patch}"
          echo "New version: $new_version"

          # Export the new version
          echo "NEW_VERSION=$new_version" >> $GITHUB_ENV
          echo "::set-output name=NEW_VERSION::$new_version"

  publish-staging:
    needs: [build-and-test, determine-version]
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Staging Image
        run: |
          docker tag $IMAGE_NAME:latest $IMAGE_NAME:${{ needs.determine-version.outputs.new_version }}-staging
          docker push $IMAGE_NAME:${{ needs.determine-version.outputs.new_version }}-staging

  publish-homolog:
    needs: [build-and-test, determine-version]
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.pull_request.merged
    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Homolog Image
        run: |
          docker tag $IMAGE_NAME:latest $IMAGE_NAME:${{ needs.determine-version.outputs.new_version }}-homolog
          docker push $IMAGE_NAME:${{ needs.determine-version.outputs.new_version }}-homolog

  publish-production:
    needs: [build-and-test, determine-version]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Production Image
        run: |
          docker tag $IMAGE_NAME:latest $IMAGE_NAME:${{ needs.determine-version.outputs.new_version }}
          docker push $IMAGE_NAME:${{ needs.determine-version.outputs.new_version }}
